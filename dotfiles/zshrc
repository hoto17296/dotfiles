export EDITOR=vim
export LANG=ja_JP.UTF-8

bindkey -d # キーバインドリセット
bindkey -e # emacsモード

alias v='vim'
alias vi='vim'
alias be='bundle exec'
alias pag='ps aux | grep'
alias rake='noglob rake'

setopt correct # typo補完
setopt nobeep  # beep音鳴らさない


# 補完

autoload -Uz compinit
compinit

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # 大文字小文字を区別しない


# 色

export LSCOLORS=gxfxcxdxbxegedabagacag
export LS_COLORS='di=36;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;46'

zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}


# 移動

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias pd='popd'

setopt auto_cd           # ディレクトリ名だけで移動
setopt auto_pushd        # pushdで移動
setopt pushd_ignore_dups # pushdの履歴は残さない


# 履歴

if [ -z $HISTFILE ]; then
  HISTFILE=$HOME/.zsh_history
fi

HISTSIZE=10000
SAVEHIST=10000

setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
setopt share_history


# Git

alias g='git'
compdef g=git

function current_branch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || \
  ref=$(git rev-parse --short HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}

alias gpl='git pull origin $(current_branch)'
alias gps='git push origin $(current_branch)'


# プロンプト

function rprompt-git-current-branch {
  local name st color gitdir action
  if [[ "$PWD" =~ '/¥.git(/.*)?$' ]]; then return; fi
  name=$(basename "`git symbolic-ref HEAD 2> /dev/null`")
  if [[ -z $name ]]; then return; fi
  
  st=`git status 2> /dev/null`
  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    color=%f
  elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
    color=%F{yellow}
  elif [[ -n `echo "$st" | grep "^# Untracked"` ]]; then
    color=%B%F{red}
  else
    color=%F{red}
  fi
  echo "$color($name)%f%b"
}

local face="%(?:%F{green}(^_^):%F{red}(>_<%)%s)%f"
PROMPT='${face}%M:%c$(rprompt-git-current-branch)$ '
SPROMPT='%F{yellow}(?_?)%fもしかして: %B%r%b [y/N/a/e]? '
RPROMPT='`date +"%Y/%m/%d(%a) %k:%M:%S"`'

setopt prompt_subst      # プロンプト文字列を評価する
setopt transient_rprompt # 古い右プロンプトを消す


# env系

if [[ -d "$HOME/.rbenv" ]]; then
  export PATH="$HOME/.rbenv/shims:$PATH"
  eval "$(rbenv init - zsh)"
fi

if [[ -d "$HOME/.plenv" ]]; then
  eval "$(plenv init - zsh)"
fi


# peco

function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER" --prompt "HISTORY>")
    CURSOR=$#BUFFER
    zle clear-screen
}

if [ -x "`which peco`" ]; then
  # ブランチ移動
  alias gb='git checkout $(git branch | peco --prompt "GIT BRANCH>")'
  # 履歴のインクリメンタルサーチ
  zle -N peco-select-history
  bindkey '^r' peco-select-history
fi


# OS固有設定

case "${OSTYPE}" in
darwin*)
  alias l='ls -GFlah'
  export PATH="$HOME/Applications/bin:$PATH"
  # rm でゴミ箱に移動
  if [ -x "`which rmtrash`" ]; then alias rm='rmtrash'; fi
  ;;
linux*)
  alias l='ls -Flah --color'
  ;;
esac


# マシン固有設定

if [ -f ~/.zshrc.local ]; then source ~/.zshrc.local; fi
